name: Terraform and Docker

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  TF_VAR_ENVIRONMENT: ${{ github.ref == 'refs/heads/dev' && 'dev' || github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' }}
  GITHUB_REGISTRY: ghcr.io/${{ github.repository }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        continue-on-error: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        continue-on-error: true

      - name: Initialize Terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

        run: |
          cd HuggingFace/aws/
          terraform init -reconfigure
        continue-on-error: true

      - name: Select or Create Terraform Workspace
        run: |
          cd HuggingFace/aws/
          WORKSPACE_NAME=${{ github.ref == 'refs/heads/dev' && 'dev' || github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' }}
          echo "Terraform workspace: $WORKSPACE_NAME"
          echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
          terraform workspace select $WORKSPACE_NAME || terraform workspace new $WORKSPACE_NAME
        continue-on-error: true

      - name: Terraform Init and Plan
        run: |
          cd HuggingFace/aws/
          terraform init && terraform plan
        continue-on-error: true

  terraform_apply:
    runs-on: ubuntu-latest
    needs: terraform
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        continue-on-error: true

      - name: Terraform Apply
        run: |
          cd HuggingFace/aws
          terraform apply -auto-approve
        continue-on-error: true

  terraform_destroy:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        continue-on-error: true

      - name: Terraform Destroy
        run: |
          cd HuggingFace/aws
          terraform destroy -auto-approve
        continue-on-error: true

  docker_build_and_tag:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        continue-on-error: true

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        continue-on-error: true

      - name: Build and tag Docker image
        run: |
            cd HuggingFace/Docker/
            docker build -t ${{ secrets.DOCKER_HUB_USERNAME}}/huggingface:latest .
            docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/huggingface:latest ${{ secrets.DOCKER_HUB_USERNAME }}/mysqlrestapi:${{ github.sha }}
        continue-on-error: true

      - name: Push Docker image to Docker Hub
        run: |
            docker push --all-tags ${{ secrets.DOCKER_HUB_USERNAME}}/huggingface:latest
            docker push ${{ secrets.DOCKER_HUB_USERNAME}}/huggingface:${{ github.sha }}
        continue-on-error: true

  docker_push_aws_ecr:
    runs-on: ubuntu-latest
    needs: [terraform, docker_build_and_tag]
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        continue-on-error: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        continue-on-error: true

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
        continue-on-error: true
